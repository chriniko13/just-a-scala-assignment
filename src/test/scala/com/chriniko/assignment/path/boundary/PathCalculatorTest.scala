package com.chriniko.assignment.path.boundary

import org.scalatest.FunSuite

class PathCalculatorTest extends FunSuite {

  test("testCalculate_minimum_path_recursive_solution") {

    // when
    val minimumPath = PathCalculator.calculate("sample_file.txt")


    // then
    assert(minimumPath._1.size == 4)
    assert(minimumPath == (List(7, 6, 3, 2), 18))

  }

  test("testCalculate_minimum_path_bottom_up_dynamic_programming_solution") {


    // when
    val minimumPath = PathCalculator.calculate("sample_file_4.txt")


    // then
    assert(minimumPath._1.size == 50)
    assert(minimumPath ==
      (List(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), 50))

  }

  test("testCalculate_minimum_path_bottom_up_dynamic_programming_solution_500_row_case") {


    // when
    val minimumPath = PathCalculator.calculate("sample_file_5.txt")


    // then
    assert(minimumPath._1.size == 500)
    assert(minimumPath ==
      (List(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
        , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), 500))

  }

  test("testCalculate_minimum_path_bottom_up_dynamic_programming_solution_500_row_case_2") {


    // when
    val minimumPath = PathCalculator.calculate("sample_file_6.txt")


    // then
    assert(minimumPath._1.size == 500)
    assert(minimumPath ==
      (List(178, 161, 66, 183, 73, 13, 20, 12, 5, 4, 57, 82, 15, 54, 143, 148, 3, 16, 31, 19, 144,
        34, 8, 45, 64, 148, 37, 179, 30, 22, 163, 177, 51, 128, 17, 6, 205, 67, 20, 36, 153, 96, 11,
        11, 92, 189, 151, 94, 38, 26, 39, 27, 8, 183, 61, 79, 56, 81, 60, 78, 11, 2, 83, 83, 76, 67,
        144, 20, 104, 129, 22, 46, 61, 75, 106, 37, 33, 20, 198, 110, 96, 30, 175, 71, 28, 22, 59, 98,
        11, 120, 96, 58, 124, 116, 27, 3, 100, 48, 94, 2, 117, 6, 62, 45, 207, 81, 94, 79, 31, 66, 43,
        12, 144, 30, 67, 79, 50, 5, 24, 55, 109, 72, 4, 19, 135, 26, 24, 12, 100, 91, 74, 98, 65, 38,
        118, 62, 89, 94, 29, 75, 95, 22, 53, 12, 224, 20, 55, 33, 10, 58, 49, 59, 19, 134, 29, 93, 19,
        122, 174, 5, 3, 13, 73, 35, 62, 3, 96, 70, 228, 67, 40, 72, 72, 12, 92, 34, 68, 15, 198, 24, 114,
        38, 44, 157, 63, 24, 43, 6, 172, 100, 24, 97, 60, 127, 53, 40, 46, 107, 89, 48, 190, 35, 62, 51, 71,
        6, 98, 72, 1, 17, 24, 153, 21, 97, 19, 78, 9, 93, 1, 20, 76, 47, 62, 81, 144, 28, 13, 196, 24, 32, 28,
        109, 10, 50, 22, 74, 34, 64, 55, 50, 28, 18, 214, 96, 110, 185, 18, 125, 72, 145, 23, 41, 90, 32, 131, 88,
        56, 113, 20, 127, 19, 20, 35, 1, 97, 34, 67, 144, 46, 32, 37, 169, 8, 163, 59, 80, 85, 2, 15, 66, 71, 28, 5,
        129, 53, 61, 33, 14, 3, 53, 39, 106, 19, 87, 25, 21, 8, 148, 33, 91, 2, 28, 51, 91, 14, 135, 218, 30, 70, 66,
        15, 33, 42, 7, 71, 80, 154, 57, 162, 67, 45, 77, 25, 125, 23, 17, 132, 146, 11, 41, 29, 132, 61, 63, 10, 72, 58,
        40, 85, 59, 11, 51, 73, 134, 89, 95, 23, 71, 38, 132, 111, 6, 93, 165, 27, 23, 119, 25, 127, 12, 56, 41, 60, 91,
        142, 6, 50, 60, 94, 58, 31, 16, 15, 151, 19, 16, 13, 17, 33, 5, 6, 5, 67, 81, 130, 111, 58, 21, 2, 146, 33, 120,
        32, 23, 73, 74, 16, 99, 112, 41, 34, 55, 43, 35, 89, 64, 6, 122, 9, 68, 12, 61, 6, 7, 23, 56, 216, 12, 37, 1, 42,
        28, 14, 20, 40, 34, 114, 12, 140, 245, 45, 29, 46, 160, 92, 36, 67, 27, 34, 28, 150, 67, 73, 130, 87, 2, 1, 142, 31,
        14, 20, 50, 85, 19, 141, 111, 106, 102, 29, 19, 53, 26, 101, 34, 40, 126, 22, 91, 106, 13, 24, 157, 130, 29, 7, 67, 29,
        60, 44, 63, 144, 127, 99, 85, 21, 69, 52, 22, 37, 100, 55, 11, 41, 145, 37, 53, 47, 33, 65, 34), 32482))

  }

}
